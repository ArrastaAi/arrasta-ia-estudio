import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

interface GenerationRequest {
  topic: string;
  audience: string;
  intention: string;
  slideCount: number;
  context?: string;
}

interface SlideContent {
  title: string;
  subtitle: string;
  body: string[];
}

interface GenerationResponse {
  success: boolean;
  slides?: SlideContent[];
  error?: string;
  agent_logs?: string[];
}

// System prompts para cada agente especializado
const AGENT_PROMPTS = {
  roteirista: `Voc√™ √© o ROTEIRISTA, especialista em storytelling emocional.
  
MISS√ÉO: Criar uma narrativa envolvente que conecta emocionalmente o leitor slide ap√≥s slide.

REGRAS OBRIGAT√ìRIAS:
- Use experi√™ncias humanas reais e met√°foras
- Crie uma linha de racioc√≠nio fluida
- Prenda a aten√ß√£o desde o primeiro slide
- Mantenha consist√™ncia emocional

ESTRUTURA DE RESPOSTA (JSON):
{
  "slides": [
    {
      "title": "T√çTULO EM CAIXA ALTA",
      "subtitle": "Subt√≠tulo que explica",
      "body": ["Linha com gancho emocional", "Linha que desenvolve", "Linha de transi√ß√£o"]
    }
  ]
}`,

  copywriter: `Voc√™ √© o COPYWRITER, especialista em persuas√£o e convers√£o.

MISS√ÉO: Aplicar t√©cnicas de copywriting para gerar interesse, criar urg√™ncia e converter.

T√âCNICAS OBRIGAT√ìRIAS:
- Gatilhos mentais (escassez, autoridade, curiosidade)
- Ganchos irresist√≠veis nos t√≠tulos
- CTA claro e direto no √∫ltimo slide
- Linguagem persuasiva sem ser vendedora

ESTRUTURA DE RESPOSTA (JSON):
{
  "slides": [
    {
      "title": "T√çTULO COM GANCHO",
      "subtitle": "Subt√≠tulo que gera curiosidade",
      "body": ["Linha com gatilho mental", "Linha que persuade", "Linha que converte"]
    }
  ]
}`,

  editor: `Voc√™ √© o EDITOR, especialista em estrutura e fluxo de conte√∫do.

MISS√ÉO: Garantir que o conte√∫do flua perfeitamente, respeitando limites e clareza.

RESPONSABILIDADES:
- Distribuir conte√∫do equilibradamente
- Respeitar limite de 30-60 palavras por slide
- Garantir ritmo adequado entre slides
- Otimizar legibilidade

ESTRUTURA DE RESPOSTA (JSON):
{
  "slides": [
    {
      "title": "T√çTULO OTIMIZADO",
      "subtitle": "Subt√≠tulo claro e direto",
      "body": ["Linha concisa", "Linha com impacto", "Linha de conclus√£o"]
    }
  ]
}`,

  supervisor: `Voc√™ √© o SUPERVISOR, especialista em qualidade e refinamento final.

MISS√ÉO: Fazer a verifica√ß√£o final, elevando a qualidade emocional e t√©cnica do conte√∫do.

VERIFICA√á√ïES OBRIGAT√ìRIAS:
- Eliminar clich√™s e repeti√ß√µes
- Verificar conex√£o emocional
- Garantir tom adequado ao p√∫blico
- Elevar o n√≠vel de impacto

ESTRUTURA DE RESPOSTA (JSON):
{
  "slides": [
    {
      "title": "T√çTULO REFINADO",
      "subtitle": "Subt√≠tulo aprimorado",
      "body": ["Linha polida", "Linha com impacto elevado", "Linha de fechamento forte"]
    }
  ]
}`
};

async function callGeminiAgent(agentType: string, content: string, request: GenerationRequest): Promise<any> {
  const apiKey = Deno.env.get('GOOGLE_GEMINI_API_KEY');
  
  if (!apiKey) {
    throw new Error('Chave da API Gemini n√£o configurada');
  }

  const systemPrompt = AGENT_PROMPTS[agentType as keyof typeof AGENT_PROMPTS];
  const userPrompt = `
DADOS DO PROJETO:
- Tema: ${request.topic}
- P√∫blico: ${request.audience}
- Inten√ß√£o: ${request.intention}
- N√∫mero de slides: ${request.slideCount}
- Contexto adicional: ${request.context || 'Nenhum'}

${content ? `CONTE√öDO PARA REFINAR:\n${content}` : 'CRIAR CONTE√öDO NOVO'}

Retorne APENAS um JSON v√°lido seguindo a estrutura especificada. N√£o adicione texto antes ou depois do JSON.`;

  console.log(`ü§ñ Chamando agente ${agentType} com API key: ${apiKey ? 'configurada' : 'ausente'}`);

  try {
    const response = await fetch(`https://generativelanguage.googleapis.com/v1/models/gemini-1.5-flash:generateContent?key=${apiKey}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        contents: [{
          parts: [{
            text: `${systemPrompt}\n\n${userPrompt}`
          }]
        }],
        generationConfig: {
          temperature: 0.8,
          topP: 0.9,
          maxOutputTokens: 2048,
        }
      })
    });

    console.log(`üì° Status da resposta: ${response.status}`);
    
    if (!response.ok) {
      const errorText = await response.text();
      console.error(`‚ùå Erro detalhado da API: ${errorText}`);
      throw new Error(`Erro na API Gemini: ${response.status} - ${errorText}`);
    }

    const data = await response.json();
    console.log(`üìÑ Estrutura da resposta:`, JSON.stringify(data, null, 2));
    const generatedText = data.candidates?.[0]?.content?.parts?.[0]?.text;
    
    if (!generatedText) {
      throw new Error('Resposta vazia da API Gemini');
    }

    // Limpar e extrair JSON
    const jsonMatch = generatedText.match(/\{[\s\S]*\}/);
    if (!jsonMatch) {
      throw new Error('JSON n√£o encontrado na resposta');
    }

    return JSON.parse(jsonMatch[0]);
  } catch (error) {
    console.error(`‚ùå Erro no agente ${agentType}:`, error);
    console.error(`üîß Detalhes t√©cnicos:`, {
      agentType,
      hasApiKey: !!apiKey,
      requestSize: userPrompt.length
    });
    throw error;
  }
}

async function generateWithAgentPipeline(request: GenerationRequest): Promise<GenerationResponse> {
  const logs: string[] = [];
  
  try {
    // ETAPA 1: ROTEIRISTA - Cria a narrativa base
    logs.push('üé¨ Iniciando agente ROTEIRISTA...');
    const roteiristaResult = await callGeminiAgent('roteirista', '', request);
    logs.push('‚úÖ Roteirista conclu√≠do');

    // ETAPA 2: COPYWRITER - Adiciona persuas√£o
    logs.push('‚úçÔ∏è Iniciando agente COPYWRITER...');
    const copywriterResult = await callGeminiAgent('copywriter', JSON.stringify(roteiristaResult), request);
    logs.push('‚úÖ Copywriter conclu√≠do');

    // ETAPA 3: EDITOR - Ajusta estrutura
    logs.push('üìù Iniciando agente EDITOR...');
    const editorResult = await callGeminiAgent('editor', JSON.stringify(copywriterResult), request);
    logs.push('‚úÖ Editor conclu√≠do');

    // ETAPA 4: SUPERVISOR - Refinamento final
    logs.push('üîç Iniciando agente SUPERVISOR...');
    const supervisorResult = await callGeminiAgent('supervisor', JSON.stringify(editorResult), request);
    logs.push('‚úÖ Supervisor conclu√≠do');

    // Valida√ß√£o final
    const slides = supervisorResult.slides || [];
    
    // Garantir n√∫mero correto de slides
    const targetSlides = Math.max(Math.min(request.slideCount, 12), 4);
    
    if (slides.length < targetSlides) {
      // Completar slides faltantes
      for (let i = slides.length; i < targetSlides; i++) {
        slides.push({
          title: `SLIDE ${i + 1}`,
          subtitle: `Conte√∫do sobre ${request.topic}`,
          body: [`Ponto ${i + 1} sobre o tema`, "Desenvolva este t√≥pico", "Conecte com o pr√≥ximo slide"]
        });
      }
    } else if (slides.length > targetSlides) {
      slides.splice(targetSlides);
    }

    // Garantir que o √∫ltimo slide tenha CTA
    if (slides.length > 0) {
      const lastSlide = slides[slides.length - 1];
      if (!lastSlide.body.some(line => line.toLowerCase().includes('acesse') || 
                                     line.toLowerCase().includes('clique') ||
                                     line.toLowerCase().includes('saiba mais') ||
                                     line.toLowerCase().includes('confira'))) {
        lastSlide.body.push("üëÜ Acesse o link para saber mais!");
      }
    }

    logs.push(`üéØ Pipeline conclu√≠do: ${slides.length} slides gerados`);

    return {
      success: true,
      slides,
      agent_logs: logs
    };

  } catch (error) {
    logs.push(`‚ùå Erro no pipeline: ${error.message}`);
    return {
      success: false,
      error: error.message,
      agent_logs: logs
    };
  }
}

async function generateWithStreamingPipeline(request: GenerationRequest, controller: ReadableStreamDefaultController) {
  const sendEvent = (type: string, data: any) => {
    const event = `event: ${type}\ndata: ${JSON.stringify(data)}\n\n`;
    controller.enqueue(new TextEncoder().encode(event));
  };

  try {
    sendEvent('progress', { stage: 'roteirista', message: 'üé¨ Iniciando agente ROTEIRISTA...', progress: 10 });
    
    const roteiristaResult = await callGeminiAgent('roteirista', '', request);
    sendEvent('progress', { stage: 'roteirista', message: '‚úÖ Roteirista conclu√≠do', progress: 25 });

    sendEvent('progress', { stage: 'copywriter', message: '‚úçÔ∏è Iniciando agente COPYWRITER...', progress: 30 });
    const copywriterResult = await callGeminiAgent('copywriter', JSON.stringify(roteiristaResult), request);
    sendEvent('progress', { stage: 'copywriter', message: '‚úÖ Copywriter conclu√≠do', progress: 50 });

    sendEvent('progress', { stage: 'editor', message: 'üìù Iniciando agente EDITOR...', progress: 55 });
    const editorResult = await callGeminiAgent('editor', JSON.stringify(copywriterResult), request);
    sendEvent('progress', { stage: 'editor', message: '‚úÖ Editor conclu√≠do', progress: 75 });

    sendEvent('progress', { stage: 'supervisor', message: 'üîç Iniciando agente SUPERVISOR...', progress: 80 });
    const supervisorResult = await callGeminiAgent('supervisor', JSON.stringify(editorResult), request);
    sendEvent('progress', { stage: 'supervisor', message: '‚úÖ Supervisor conclu√≠do', progress: 90 });

    // Processar resultado final
    const slides = supervisorResult.slides || [];
    const targetSlides = Math.max(Math.min(request.slideCount, 12), 4);
    
    if (slides.length < targetSlides) {
      for (let i = slides.length; i < targetSlides; i++) {
        slides.push({
          title: `SLIDE ${i + 1}`,
          subtitle: `Conte√∫do sobre ${request.topic}`,
          body: [`Ponto ${i + 1} sobre o tema`, "Desenvolva este t√≥pico", "Conecte com o pr√≥ximo slide"]
        });
      }
    } else if (slides.length > targetSlides) {
      slides.splice(targetSlides);
    }

    if (slides.length > 0) {
      const lastSlide = slides[slides.length - 1];
      if (!lastSlide.body.some(line => line.toLowerCase().includes('acesse') || 
                                     line.toLowerCase().includes('clique') ||
                                     line.toLowerCase().includes('saiba mais') ||
                                     line.toLowerCase().includes('confira'))) {
        lastSlide.body.push("üëÜ Acesse o link para saber mais!");
      }
    }

    sendEvent('complete', {
      success: true,
      slides,
      progress: 100,
      message: `üéØ Pipeline conclu√≠do: ${slides.length} slides gerados`
    });

  } catch (error) {
    sendEvent('error', {
      success: false,
      error: error.message,
      message: `‚ùå Erro no pipeline: ${error.message}`
    });
  } finally {
    controller.close();
  }
}

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const url = new URL(req.url);
    const isStreaming = url.searchParams.get('stream') === 'true';
    const request: GenerationRequest = await req.json();
    
    console.log('üì• Nova solicita√ß√£o de gera√ß√£o:', {
      topic: request.topic,
      slideCount: request.slideCount,
      intention: request.intention,
      streaming: isStreaming
    });

    // Valida√ß√£o b√°sica
    if (!request.topic?.trim()) {
      throw new Error('Tema √© obrigat√≥rio');
    }

    if (isStreaming) {
      // Implementar streaming SSE
      const stream = new ReadableStream({
        start(controller) {
          generateWithStreamingPipeline(request, controller);
        }
      });

      return new Response(stream, {
        headers: {
          ...corsHeaders,
          'Content-Type': 'text/event-stream',
          'Cache-Control': 'no-cache',
          'Connection': 'keep-alive',
        },
      });
    } else {
      // Executar pipeline normal
      const result = await generateWithAgentPipeline(request);
      
      console.log('üì§ Resultado da gera√ß√£o:', {
        success: result.success,
        slidesCount: result.slides?.length || 0,
        logs: result.agent_logs?.length || 0
      });

      return new Response(JSON.stringify(result), {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

  } catch (error: any) {
    console.error('‚ùå Erro na fun√ß√£o generate-carousel-content:', error);
    
    return new Response(JSON.stringify({
      success: false,
      error: error.message || 'Erro interno do servidor',
      agent_logs: [`Erro: ${error.message}`]
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});